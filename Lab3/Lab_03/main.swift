//
//  main.swift
//  Lab_03
//
//  Created by Serguei Diaz on 06.05.2024.
//

import Foundation

let input: [String] = readLineUntilEmpty()
let code: String = input.reduce("") { partialResult, line in
    "\(partialResult)\(line.replacingOccurrences(of: " ", with: ""))"
}

var tree: Tree = Tree(lexer: Lexer(code: code), firstNodeType: .nonTerminal(subType: .programm))

switch tree.getFirstNode() {
case .success(_):
    print("Tree by levels:")
    printArrayOfStrings(tree.toStringByLevels())
    print("")
    print("Tree Graph:")
    printArrayOfStrings(tree.toStringGraph())
case .failure(let failure):
    print(failure)
}


func readLineUntilEmpty() -> [String] {
    var lines: [String] = []
    
    while let line = readLine(), !line.isEmpty {
        lines.append(line)
    }
    
    return lines
}

func printArrayOfStrings(_ array: [String]) {
    array.forEach { element in
        print(element)
    }
}

/*
<выражение> -> <простое выражение> | <простое выражение> <операция отношения> <простое выражение>
<простое выражение> -> <терм> | <знак> <терм> | <простое выражение> <операция типа сложения> <терм>
<терм> -> <фактор> | <терм> <операция типа умножения> <фактор>
<фактор> -> <идентификатор> | <константа> | ( < простое выражение > ) | not <фактор>
<операция отношения> -> = | <> | < | <= | > | >=
<знак> -> +|-
<операция типа сложения> -> + | - | or
<операция типа умножения> -> * | / | div | mod | and
<программа> -> <блок>
<блок> -> { <список операторов> }
<список операторов> -> <оператор> <хвост>
<хвост> -> ; <оператор> <хвост> | ε
 
 <выражение>-><простоевыражение>|<простоевыражение><операцияотношения><простоевыражение>
 <простоевыражение>-><терм><простоевыражение>'|<знак><терм><простоевыражение>'
 <терм>-><фактор><терм>'
 <фактор>-><идентификатор>|<константа>|(<простоевыражение>)|not<фактор>
 <операцияотношения>->=|<>|<|<=|>|>=
 <знак>->+|-
 <операциятипасложения>->+|-|or
 <операциятипаумножения>->*|/|div|mod|and
 <программа>-><блок>
 <блок>->{<списокоператоров>}
 <списокоператоров>-><оператор><хвост>
 <хвост>->;<оператор><хвост>|ε
 <простоевыражение>'-><операциятипасложения><терм><простоевыражение>'|ε
 <терм>'-><операциятипаумножения><фактор><терм>'|ε
 
 <выражение>-><простоевыражение>|<простоевыражение><операцияотношения><простоевыражение>
 <простоевыражение>-><терм><простоевыражение>'|<знак><терм><простоевыражение>'|<терм>|<знак><терм>
 <терм>-><фактор><терм>'|<фактор>
 <фактор>-><идентификатор>|<константа>|(<простоевыражение>)|not<фактор>
 <операцияотношения>->=|<>|<|<=|>|>=
 <знак>->+|-
 <операциятипасложения>->+|-|or
 <операциятипаумножения>->*|/|div|mod|and
 <программа>-><блок>
 <блок>->{<списокоператоров>}
 <списокоператоров>-><оператор><хвост>|<оператор>
 <хвост>->;<оператор><хвост>|;<оператор>
 <простоевыражение>'-><операциятипасложения><терм><простоевыражение>'|<операциятипасложения><терм>
 <терм>'-><операциятипаумножения><фактор><терм>'|<операциятипаумножения><фактор>
 */

/*
 <выражение>-><простоевыражение>|<простоевыражение><операцияотношения><простоевыражение>
 <простоевыражение>-><терм><простоевыражение>'|<знак><терм><простоевыражение>'|<терм>|<знак><терм>
 <терм>-><фактор><терм>'|<фактор>
 <фактор>-><идентификатор>|<константа>|(<простоевыражение>)|not<фактор>
 <операцияотношения>->==|<>|<|<=|>|>=
 <знак>->+|-
 <операциятипасложения>->+|-|or
 <операциятипаумножения>->*|/|div|mod|and
 <программа>-><блок>
 <блок>->{<списокоператоров>;}
 <списокоператоров>-><оператор><хвост>|<оператор>
 <хвост>->;<оператор><хвост>|;<оператор>
 <оператор>-><идентификатор>=<выражение>|<блок>
 <простоевыражение>'-><операциятипасложения><терм><простоевыражение>'|<операциятипасложения><терм>
 <терм>'-><операциятипаумножения><фактор><терм>'|<операциятипаумножения><фактор>

 test 1:
 {<идентификатор>=<константа>;}
 
 test 2:
 {{<идентификатор>=-(<константа>)mod<идентификатор>+not<идентификатор>==<константа>or<идентификатор>;};<идентификатор>=<идентификатор>;}
 */
